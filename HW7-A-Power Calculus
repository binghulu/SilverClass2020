#include <iostream>
#include <map>
#include <algorithm>
using namespace std;
int n, a[13];
//map<int, int> twos;
//map<int, int>::iterator it, starter;
 
 bool dfs(int d, int k){
 	if (a[d] == n) return true;
 	if (d == k) return false;
 	
 	int j = a[0];
 	for (int i = 0; i < d; i++) j = max(j, a[i+1]);
 	if ((j << (k-d)) < n) return false;
 	
 	for (int i = d; i >= 0; i--){
 		a[d+1] = a[d]+a[i];
 		if (dfs(d+1, k)) return true;
 		a[d+1] = a[d]-a[i];
 		if (dfs(d+1, k)) return true;
 	}
 	return false;
 }
 
 
int fill(int n){
	if (n == 1) return 0;
	a[0] = 1;
	for (int i = 0; i < 13; i++){
		if (dfs(0, i)) return i;
	}
	return 13;
}
 
 
 
int main() {
	//twos[2] = 1, twos[4] = 2, twos[8] = 3, twos[16] = 4, twos[32] = 5, twos[64] = 6, twos[128] = 7, twos[256] = 8, twos[512] = 9;
	//fill();
	while (cin >> n){
		if (n == 0) break;
		cout << fill(n) << endl;
	}
	return 0;
	
	
	/*
	starter = twos.begin();
	for (int i = 3; i < 1000; i++){
		if (twos.find(i) != twos.end()) a[i] = twos.find(i)->second;
		else{
			cout << "i = "  << i << endl;
			it = starter;
			while (it != twos.end()){
				if (it->first == 512){
					a[i] = 9 + a[i-(it->first)];
					break;
				}
				if (i > it->first && i < (++it)->first){
					it--;
					starter = it;
					int x, y;
					x = it->second+a[i-(it->first)];
					y = (++it)->second+a[(it->first)-i];
					cout << x << " " << y << endl;;
					it--;
					a[i] = min(x, y);
					//cout << a[i] << endl;
					break;
				}
				//cout << it->first << endl;
			}
		}
		cout << "i = " << i << " " << a[i] << endl;
	}
	*/
}
